{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1pCjFvUykhCgJ9KUgHXWKhFIC313zavpZ",
      "authorship_tag": "ABX9TyN8l0uIgxTMFudW92jY59N+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ADITYA9902/CIE-3/blob/main/CIE-3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hFAMW6vjclEg",
        "outputId": "f93de918-0ab5-46d4-c1c0-fc92a4a61a3d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " head         CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD  TAX  PTRATIO  \\\n",
            "0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900    1  296     15.3   \n",
            "1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671    2  242     17.8   \n",
            "2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671    2  242     17.8   \n",
            "3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622    3  222     18.7   \n",
            "4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622    3  222     18.7   \n",
            "\n",
            "        B  LSTAT  MEDV  \n",
            "0  396.90   4.98  24.0  \n",
            "1  396.90   9.14  21.6  \n",
            "2  392.83   4.03  34.7  \n",
            "3  394.63   2.94  33.4  \n",
            "4  396.90    NaN  36.2  \n",
            " describe                CRIM          ZN       INDUS        CHAS         NOX          RM  \\\n",
            "count  486.000000  486.000000  486.000000  486.000000  506.000000  506.000000   \n",
            "mean     3.611874   11.211934   11.083992    0.069959    0.554695    6.284634   \n",
            "std      8.720192   23.388876    6.835896    0.255340    0.115878    0.702617   \n",
            "min      0.006320    0.000000    0.460000    0.000000    0.385000    3.561000   \n",
            "25%      0.081900    0.000000    5.190000    0.000000    0.449000    5.885500   \n",
            "50%      0.253715    0.000000    9.690000    0.000000    0.538000    6.208500   \n",
            "75%      3.560263   12.500000   18.100000    0.000000    0.624000    6.623500   \n",
            "max     88.976200  100.000000   27.740000    1.000000    0.871000    8.780000   \n",
            "\n",
            "              AGE         DIS         RAD         TAX     PTRATIO           B  \\\n",
            "count  486.000000  506.000000  506.000000  506.000000  506.000000  506.000000   \n",
            "mean    68.518519    3.795043    9.549407  408.237154   18.455534  356.674032   \n",
            "std     27.999513    2.105710    8.707259  168.537116    2.164946   91.294864   \n",
            "min      2.900000    1.129600    1.000000  187.000000   12.600000    0.320000   \n",
            "25%     45.175000    2.100175    4.000000  279.000000   17.400000  375.377500   \n",
            "50%     76.800000    3.207450    5.000000  330.000000   19.050000  391.440000   \n",
            "75%     93.975000    5.188425   24.000000  666.000000   20.200000  396.225000   \n",
            "max    100.000000   12.126500   24.000000  711.000000   22.000000  396.900000   \n",
            "\n",
            "            LSTAT        MEDV  \n",
            "count  486.000000  506.000000  \n",
            "mean    12.715432   22.532806  \n",
            "std      7.155871    9.197104  \n",
            "min      1.730000    5.000000  \n",
            "25%      7.125000   17.025000  \n",
            "50%     11.430000   21.200000  \n",
            "75%     16.955000   25.000000  \n",
            "max     37.970000   50.000000  \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 506 entries, 0 to 505\n",
            "Data columns (total 14 columns):\n",
            " #   Column   Non-Null Count  Dtype  \n",
            "---  ------   --------------  -----  \n",
            " 0   CRIM     486 non-null    float64\n",
            " 1   ZN       486 non-null    float64\n",
            " 2   INDUS    486 non-null    float64\n",
            " 3   CHAS     486 non-null    float64\n",
            " 4   NOX      506 non-null    float64\n",
            " 5   RM       506 non-null    float64\n",
            " 6   AGE      486 non-null    float64\n",
            " 7   DIS      506 non-null    float64\n",
            " 8   RAD      506 non-null    int64  \n",
            " 9   TAX      506 non-null    int64  \n",
            " 10  PTRATIO  506 non-null    float64\n",
            " 11  B        506 non-null    float64\n",
            " 12  LSTAT    486 non-null    float64\n",
            " 13  MEDV     506 non-null    float64\n",
            "dtypes: float64(12), int64(2)\n",
            "memory usage: 55.5 KB\n",
            " info  None\n",
            "shape (506, 14)\n"
          ]
        }
      ],
      "source": [
        "# @title boston house Exploration\n",
        "import pandas as pd\n",
        "df=pd.read_csv('/content/drive/MyDrive/DATA SET /HousingData.csv')\n",
        "\n",
        "# exploration\n",
        "print(\" head  \",df.head())\n",
        "print(\" describe  \",df.describe())\n",
        "print(\" info \",df.info())\n",
        "print(\"shape\",df.shape)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title boston house preprocessing\n",
        "print(\"isnull\",df.isnull())\n",
        "print(\" dropna \",df.dropna())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ctd567vpdtHj",
        "outputId": "a99aedfa-489a-4d88-823b-b89966f79d71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "isnull       CRIM     ZN  INDUS   CHAS    NOX     RM    AGE    DIS    RAD    TAX  \\\n",
            "0    False  False  False  False  False  False  False  False  False  False   \n",
            "1    False  False  False  False  False  False  False  False  False  False   \n",
            "2    False  False  False  False  False  False  False  False  False  False   \n",
            "3    False  False  False  False  False  False  False  False  False  False   \n",
            "4    False  False  False  False  False  False  False  False  False  False   \n",
            "..     ...    ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
            "501  False  False  False  False  False  False  False  False  False  False   \n",
            "502  False  False  False  False  False  False  False  False  False  False   \n",
            "503  False  False  False  False  False  False  False  False  False  False   \n",
            "504  False  False  False  False  False  False  False  False  False  False   \n",
            "505  False  False  False  False  False  False   True  False  False  False   \n",
            "\n",
            "     PTRATIO      B  LSTAT   MEDV  \n",
            "0      False  False  False  False  \n",
            "1      False  False  False  False  \n",
            "2      False  False  False  False  \n",
            "3      False  False  False  False  \n",
            "4      False  False   True  False  \n",
            "..       ...    ...    ...    ...  \n",
            "501    False  False   True  False  \n",
            "502    False  False  False  False  \n",
            "503    False  False  False  False  \n",
            "504    False  False  False  False  \n",
            "505    False  False  False  False  \n",
            "\n",
            "[506 rows x 14 columns]\n",
            " dropna          CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD  TAX  \\\n",
            "0    0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900    1  296   \n",
            "1    0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671    2  242   \n",
            "2    0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671    2  242   \n",
            "3    0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622    3  222   \n",
            "5    0.02985   0.0   2.18   0.0  0.458  6.430  58.7  6.0622    3  222   \n",
            "..       ...   ...    ...   ...    ...    ...   ...     ...  ...  ...   \n",
            "499  0.17783   0.0   9.69   0.0  0.585  5.569  73.5  2.3999    6  391   \n",
            "500  0.22438   0.0   9.69   0.0  0.585  6.027  79.7  2.4982    6  391   \n",
            "502  0.04527   0.0  11.93   0.0  0.573  6.120  76.7  2.2875    1  273   \n",
            "503  0.06076   0.0  11.93   0.0  0.573  6.976  91.0  2.1675    1  273   \n",
            "504  0.10959   0.0  11.93   0.0  0.573  6.794  89.3  2.3889    1  273   \n",
            "\n",
            "     PTRATIO       B  LSTAT  MEDV  \n",
            "0       15.3  396.90   4.98  24.0  \n",
            "1       17.8  396.90   9.14  21.6  \n",
            "2       17.8  392.83   4.03  34.7  \n",
            "3       18.7  394.63   2.94  33.4  \n",
            "5       18.7  394.12   5.21  28.7  \n",
            "..       ...     ...    ...   ...  \n",
            "499     19.2  395.77  15.10  17.5  \n",
            "500     19.2  396.90  14.33  16.8  \n",
            "502     21.0  396.90   9.08  20.6  \n",
            "503     21.0  396.90   5.64  23.9  \n",
            "504     21.0  393.45   6.48  22.0  \n",
            "\n",
            "[394 rows x 14 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title boston house data spliting\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "x1=df[['CRIM','INDUS']]\n",
        "y1=df['TAX']\n",
        "x1_train,x1_test,y1_train,y1_test=train_test_split(x1,y1,test_size=0.5)\n",
        "print(\" x_train\",x1_train)\n",
        "print(\" x_test\",x1_test)\n",
        "print(\" y_train\",y1_train)\n",
        "print(\" y_test \",y1_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o3JTlG4SeEVK",
        "outputId": "04785a59-8070-44c5-ec02-5103bc606ba1"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " x_train          CRIM  INDUS\n",
            "200   0.01778   1.47\n",
            "434  13.91340  18.10\n",
            "45    0.17142   6.91\n",
            "476   4.87141  18.10\n",
            "325   0.19186   7.38\n",
            "..        ...    ...\n",
            "99    0.06860   2.89\n",
            "19    0.72580   8.14\n",
            "196       NaN   1.52\n",
            "101   0.11432   8.56\n",
            "319   0.47547   9.90\n",
            "\n",
            "[253 rows x 2 columns]\n",
            " x_test          CRIM  INDUS\n",
            "316   0.31827   9.90\n",
            "46    0.18836   6.91\n",
            "74    0.07896  12.83\n",
            "14    0.63796   8.14\n",
            "257   0.61154   3.97\n",
            "..        ...    ...\n",
            "388  14.33370  18.10\n",
            "121   0.07165  25.65\n",
            "49    0.21977   6.91\n",
            "141   1.62864  21.89\n",
            "81    0.04462   4.86\n",
            "\n",
            "[253 rows x 2 columns]\n",
            " y_train 200    402\n",
            "434    666\n",
            "45     233\n",
            "476    666\n",
            "325    287\n",
            "      ... \n",
            "99     276\n",
            "19     307\n",
            "196    329\n",
            "101    384\n",
            "319    304\n",
            "Name: TAX, Length: 253, dtype: int64\n",
            " y_test  316    304\n",
            "46     233\n",
            "74     398\n",
            "14     307\n",
            "257    264\n",
            "      ... \n",
            "388    666\n",
            "121    188\n",
            "49     233\n",
            "141    437\n",
            "81     281\n",
            "Name: TAX, Length: 253, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title iris exploration\n",
        "data=pd.read_csv('/content/drive/MyDrive/DATA SET /Iris.csv')\n",
        "print(\"head\",data.head())\n",
        "print(\" describe\",data.describe())\n",
        "print(\" info\",data.info)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P97sYWg7me9n",
        "outputId": "916c0243-7aa8-4cb2-e46e-968c32e7a2e5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "head    Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm      Species\n",
            "0   1            5.1           3.5            1.4           0.2  Iris-setosa\n",
            "1   2            4.9           3.0            1.4           0.2  Iris-setosa\n",
            "2   3            4.7           3.2            1.3           0.2  Iris-setosa\n",
            "3   4            4.6           3.1            1.5           0.2  Iris-setosa\n",
            "4   5            5.0           3.6            1.4           0.2  Iris-setosa\n",
            " describe                Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm\n",
            "count  150.000000     150.000000    150.000000     150.000000    150.000000\n",
            "mean    75.500000       5.843333      3.054000       3.758667      1.198667\n",
            "std     43.445368       0.828066      0.433594       1.764420      0.763161\n",
            "min      1.000000       4.300000      2.000000       1.000000      0.100000\n",
            "25%     38.250000       5.100000      2.800000       1.600000      0.300000\n",
            "50%     75.500000       5.800000      3.000000       4.350000      1.300000\n",
            "75%    112.750000       6.400000      3.300000       5.100000      1.800000\n",
            "max    150.000000       7.900000      4.400000       6.900000      2.500000\n",
            " info <bound method DataFrame.info of       Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  \\\n",
            "0      1            5.1           3.5            1.4           0.2   \n",
            "1      2            4.9           3.0            1.4           0.2   \n",
            "2      3            4.7           3.2            1.3           0.2   \n",
            "3      4            4.6           3.1            1.5           0.2   \n",
            "4      5            5.0           3.6            1.4           0.2   \n",
            "..   ...            ...           ...            ...           ...   \n",
            "145  146            6.7           3.0            5.2           2.3   \n",
            "146  147            6.3           2.5            5.0           1.9   \n",
            "147  148            6.5           3.0            5.2           2.0   \n",
            "148  149            6.2           3.4            5.4           2.3   \n",
            "149  150            5.9           3.0            5.1           1.8   \n",
            "\n",
            "            Species  \n",
            "0       Iris-setosa  \n",
            "1       Iris-setosa  \n",
            "2       Iris-setosa  \n",
            "3       Iris-setosa  \n",
            "4       Iris-setosa  \n",
            "..              ...  \n",
            "145  Iris-virginica  \n",
            "146  Iris-virginica  \n",
            "147  Iris-virginica  \n",
            "148  Iris-virginica  \n",
            "149  Iris-virginica  \n",
            "\n",
            "[150 rows x 6 columns]>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title iris preprocessing\n",
        "print(\" isnull\",data.isnull())\n",
        "print(\" dropna\",data.dropna())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qha5l8N8nPX4",
        "outputId": "98a55b91-5d44-4668-9be6-aa2fb86e4b6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " isnull         Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  Species\n",
            "0    False          False         False          False         False    False\n",
            "1    False          False         False          False         False    False\n",
            "2    False          False         False          False         False    False\n",
            "3    False          False         False          False         False    False\n",
            "4    False          False         False          False         False    False\n",
            "..     ...            ...           ...            ...           ...      ...\n",
            "145  False          False         False          False         False    False\n",
            "146  False          False         False          False         False    False\n",
            "147  False          False         False          False         False    False\n",
            "148  False          False         False          False         False    False\n",
            "149  False          False         False          False         False    False\n",
            "\n",
            "[150 rows x 6 columns]\n",
            " dropna       Id  SepalLengthCm  SepalWidthCm  PetalLengthCm  PetalWidthCm  \\\n",
            "0      1            5.1           3.5            1.4           0.2   \n",
            "1      2            4.9           3.0            1.4           0.2   \n",
            "2      3            4.7           3.2            1.3           0.2   \n",
            "3      4            4.6           3.1            1.5           0.2   \n",
            "4      5            5.0           3.6            1.4           0.2   \n",
            "..   ...            ...           ...            ...           ...   \n",
            "145  146            6.7           3.0            5.2           2.3   \n",
            "146  147            6.3           2.5            5.0           1.9   \n",
            "147  148            6.5           3.0            5.2           2.0   \n",
            "148  149            6.2           3.4            5.4           2.3   \n",
            "149  150            5.9           3.0            5.1           1.8   \n",
            "\n",
            "            Species  \n",
            "0       Iris-setosa  \n",
            "1       Iris-setosa  \n",
            "2       Iris-setosa  \n",
            "3       Iris-setosa  \n",
            "4       Iris-setosa  \n",
            "..              ...  \n",
            "145  Iris-virginica  \n",
            "146  Iris-virginica  \n",
            "147  Iris-virginica  \n",
            "148  Iris-virginica  \n",
            "149  Iris-virginica  \n",
            "\n",
            "[150 rows x 6 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title data spliting and evaluation\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "iris=load_iris()\n",
        "x=iris.data\n",
        "y=iris.target\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)\n",
        "\n",
        "print(\" train data\",x_train,y_train)\n",
        "print(\" test data \",x_test,y_test)\n",
        "\n",
        "\n",
        "DT=DecisionTreeClassifier()\n",
        "DT.fit(x_train,y_train)\n",
        "\n",
        "\n",
        "\n",
        "y_pred=DT.predict(x_test)\n",
        "print(\" accuracy score \",accuracy_score(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lM75vEgWhLlA",
        "outputId": "12cd2a88-0ab8-498e-cea7-496e0a1fbb02"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " train data [[5.5 2.4 3.7 1. ]\n",
            " [6.3 2.9 5.6 1.8]\n",
            " [6.4 2.8 5.6 2.1]\n",
            " [5.5 2.6 4.4 1.2]\n",
            " [5.4 3.9 1.7 0.4]\n",
            " [5.7 4.4 1.5 0.4]\n",
            " [4.6 3.4 1.4 0.3]\n",
            " [5.  2.  3.5 1. ]\n",
            " [5.5 2.4 3.8 1.1]\n",
            " [4.6 3.6 1.  0.2]\n",
            " [5.6 2.9 3.6 1.3]\n",
            " [6.5 2.8 4.6 1.5]\n",
            " [5.6 2.5 3.9 1.1]\n",
            " [6.6 3.  4.4 1.4]\n",
            " [6.  2.2 4.  1. ]\n",
            " [6.3 2.8 5.1 1.5]\n",
            " [6.3 2.3 4.4 1.3]\n",
            " [5.1 3.8 1.5 0.3]\n",
            " [5.2 2.7 3.9 1.4]\n",
            " [7.7 2.8 6.7 2. ]\n",
            " [7.1 3.  5.9 2.1]\n",
            " [6.  2.9 4.5 1.5]\n",
            " [5.5 2.5 4.  1.3]\n",
            " [6.7 3.3 5.7 2.1]\n",
            " [5.8 2.7 4.1 1. ]\n",
            " [5.7 2.8 4.5 1.3]\n",
            " [4.3 3.  1.1 0.1]\n",
            " [6.9 3.1 5.1 2.3]\n",
            " [5.6 2.7 4.2 1.3]\n",
            " [5.4 3.4 1.5 0.4]\n",
            " [4.9 3.  1.4 0.2]\n",
            " [6.1 2.6 5.6 1.4]\n",
            " [5.1 3.3 1.7 0.5]\n",
            " [6.8 3.  5.5 2.1]\n",
            " [6.7 3.  5.2 2.3]\n",
            " [5.1 3.4 1.5 0.2]\n",
            " [5.1 2.5 3.  1.1]\n",
            " [6.1 3.  4.9 1.8]\n",
            " [5.5 2.3 4.  1.3]\n",
            " [7.2 3.6 6.1 2.5]\n",
            " [5.6 3.  4.1 1.3]\n",
            " [6.1 2.9 4.7 1.4]\n",
            " [6.2 3.4 5.4 2.3]\n",
            " [5.  3.4 1.5 0.2]\n",
            " [6.4 3.2 5.3 2.3]\n",
            " [4.6 3.1 1.5 0.2]\n",
            " [6.3 3.3 6.  2.5]\n",
            " [5.8 2.7 3.9 1.2]\n",
            " [5.7 2.5 5.  2. ]\n",
            " [4.8 3.  1.4 0.3]\n",
            " [5.9 3.2 4.8 1.8]\n",
            " [6.3 2.5 4.9 1.5]\n",
            " [5.1 3.8 1.6 0.2]\n",
            " [4.9 2.4 3.3 1. ]\n",
            " [5.  3.5 1.3 0.3]\n",
            " [6.  3.  4.8 1.8]\n",
            " [6.7 3.  5.  1.7]\n",
            " [7.6 3.  6.6 2.1]\n",
            " [4.4 3.2 1.3 0.2]\n",
            " [7.2 3.  5.8 1.6]\n",
            " [5.4 3.4 1.7 0.2]\n",
            " [6.7 2.5 5.8 1.8]\n",
            " [5.8 2.6 4.  1.2]\n",
            " [6.  2.2 5.  1.5]\n",
            " [6.1 3.  4.6 1.4]\n",
            " [5.  3.4 1.6 0.4]\n",
            " [7.4 2.8 6.1 1.9]\n",
            " [5.8 2.8 5.1 2.4]\n",
            " [6.3 2.5 5.  1.9]\n",
            " [5.2 4.1 1.5 0.1]\n",
            " [6.9 3.2 5.7 2.3]\n",
            " [5.  3.6 1.4 0.2]\n",
            " [6.7 3.1 4.7 1.5]\n",
            " [4.5 2.3 1.3 0.3]\n",
            " [6.2 2.9 4.3 1.3]\n",
            " [5.2 3.4 1.4 0.2]\n",
            " [5.7 2.6 3.5 1. ]\n",
            " [6.5 3.2 5.1 2. ]\n",
            " [6.6 2.9 4.6 1.3]\n",
            " [6.8 2.8 4.8 1.4]\n",
            " [6.7 3.1 5.6 2.4]\n",
            " [6.4 3.2 4.5 1.5]\n",
            " [5.7 3.  4.2 1.2]\n",
            " [5.4 3.  4.5 1.5]\n",
            " [6.8 3.2 5.9 2.3]\n",
            " [6.7 3.3 5.7 2.5]\n",
            " [5.6 3.  4.5 1.5]\n",
            " [5.1 3.5 1.4 0.3]\n",
            " [5.2 3.5 1.5 0.2]\n",
            " [6.3 3.4 5.6 2.4]\n",
            " [6.3 3.3 4.7 1.6]\n",
            " [6.  3.4 4.5 1.6]\n",
            " [4.6 3.2 1.4 0.2]\n",
            " [5.5 3.5 1.3 0.2]\n",
            " [4.9 3.1 1.5 0.2]\n",
            " [6.4 2.8 5.6 2.2]\n",
            " [4.8 3.  1.4 0.1]\n",
            " [6.1 2.8 4.  1.3]\n",
            " [6.5 3.  5.5 1.8]\n",
            " [5.9 3.  4.2 1.5]\n",
            " [5.4 3.7 1.5 0.2]\n",
            " [5.  3.  1.6 0.2]\n",
            " [5.8 2.7 5.1 1.9]\n",
            " [4.8 3.1 1.6 0.2]\n",
            " [5.  3.2 1.2 0.2]\n",
            " [5.  3.5 1.6 0.6]\n",
            " [5.3 3.7 1.5 0.2]\n",
            " [6.9 3.1 4.9 1.5]\n",
            " [5.  2.3 3.3 1. ]\n",
            " [6.5 3.  5.2 2. ]\n",
            " [4.7 3.2 1.6 0.2]\n",
            " [7.2 3.2 6.  1.8]\n",
            " [4.8 3.4 1.9 0.2]\n",
            " [6.5 3.  5.8 2.2]\n",
            " [4.4 3.  1.3 0.2]\n",
            " [7.7 3.  6.1 2.3]\n",
            " [5.1 3.7 1.5 0.4]\n",
            " [7.3 2.9 6.3 1.8]\n",
            " [4.7 3.2 1.3 0.2]\n",
            " [5.8 4.  1.2 0.2]] [1 2 2 1 0 0 0 1 1 0 1 1 1 1 1 2 1 0 1 2 2 1 1 2 1 1 0 2 1 0 0 2 0 2 2 0 1\n",
            " 2 1 2 1 1 2 0 2 0 2 1 2 0 1 1 0 1 0 2 1 2 0 2 0 2 1 2 1 0 2 2 2 0 2 0 1 0\n",
            " 1 0 1 2 1 1 2 1 1 1 2 2 1 0 0 2 1 1 0 0 0 2 0 1 2 1 0 0 2 0 0 0 0 1 1 2 0\n",
            " 2 0 2 0 2 0 2 0 0]\n",
            " test data  [[4.9 3.1 1.5 0.1]\n",
            " [6.7 3.1 4.4 1.4]\n",
            " [6.3 2.7 4.9 1.8]\n",
            " [6.4 2.9 4.3 1.3]\n",
            " [7.7 2.6 6.9 2.3]\n",
            " [7.7 3.8 6.7 2.2]\n",
            " [7.  3.2 4.7 1.4]\n",
            " [4.4 2.9 1.4 0.2]\n",
            " [6.2 2.8 4.8 1.8]\n",
            " [5.1 3.8 1.9 0.4]\n",
            " [4.8 3.4 1.6 0.2]\n",
            " [5.9 3.  5.1 1.8]\n",
            " [5.6 2.8 4.9 2. ]\n",
            " [5.7 3.8 1.7 0.3]\n",
            " [4.9 2.5 4.5 1.7]\n",
            " [4.9 3.6 1.4 0.1]\n",
            " [5.8 2.7 5.1 1.9]\n",
            " [5.5 4.2 1.4 0.2]\n",
            " [5.1 3.5 1.4 0.2]\n",
            " [6.4 2.7 5.3 1.9]\n",
            " [6.1 2.8 4.7 1.2]\n",
            " [6.2 2.2 4.5 1.5]\n",
            " [5.  3.3 1.4 0.2]\n",
            " [5.4 3.9 1.3 0.4]\n",
            " [5.7 2.8 4.1 1.3]\n",
            " [6.  2.7 5.1 1.6]\n",
            " [5.7 2.9 4.2 1.3]\n",
            " [6.4 3.1 5.5 1.8]\n",
            " [7.9 3.8 6.4 2. ]\n",
            " [6.9 3.1 5.4 2.1]] [0 1 2 1 2 2 1 0 2 0 0 2 2 0 2 0 2 0 0 2 1 1 0 0 1 1 1 2 2 2]\n",
            " accuracy score  0.9\n"
          ]
        }
      ]
    }
  ]
}